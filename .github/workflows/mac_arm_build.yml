on:
  workflow_dispatch:
    inputs:
      package_name:
        description: 'The package to build, this is the name of the package on PyPI'
        required: true
        type: string
      package_version:
        description: 'The package version to build, this is the version of the package on PyPI'
        required: true
        type: string
      package_url:
        description: 'Source URL for the package, this is the URL of the .tar.gz file on PyPI.'
        required: true
        type: string
      python_version:
        description: 'The Python version to use for the build. Must be one of "3.7", "3.8", "3.9", "3.10", "3.11".'
        required: true
        type: choice
        options:
        - "3.7"
        - "3.8"
        - "3.9"
        - "3.10"
        - "3.11"
      environment_variables:
        description: 'Environment variables to set for the build in CIBW_ENVIRONMENT_XX. Should be a string like "FOO=bar BAZ=qux". Handy for grpcio.'
        required: false
        type: string
      use_ccache:
        description: 'Whether to use ccache for the build. Defaults to "true".'
        required: false
        type: boolean
        default: true

jobs:
  build:
    runs-on: [ self-hosted, macOS, X64 ]
    steps:
      # Used later when parsing the GitHub action.
      - name: Output Inputs
        id: output_inputs
        run: echo '${{ toJSON(github.event.inputs) }}'

      # This is used by cibuildwheel.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

#      - name: Install ccache
#        if: ${{ inputs.use_ccache }}
#        run: brew install ccache

      - name: Get ccache environment
        id: ccache_env
        run: |
          if [ "${{ inputs.use_ccache }}" == "true" ]
          then
            echo "CCACHE_PATH_PREPEND=/usr/local/opt/ccache/libexec" >> $GITHUB_OUTPUT
          else
            echo "CCACHE_PATH_PREPEND=" >> $GITHUB_OUTPUT
          fi

      # Build name becomes package_name (underscore) package_version (underscore) python_version, without special characters.
      # This is to fix folder names.
      - name: Set build name output to a clean name
        id: build_name
        run: |
          echo "BUILD_NAME=$(echo ${{ inputs.package_name }}_${{ inputs.package_version }}_${{ inputs.python_version }} | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set python version output to a clean name (39, 310 etc)
        id: python_no_dots
        run:
          echo "PYTHON_NO_DOTS=$(echo ${{ inputs.python_version }} | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # This is the main step that builds the wheels.
      # Steps:
      # 1. Remove the build directory (if it exists, as the runners are reused)
      # 2. Create and cd into the build directory
      # 3. wget the package from the passed in URL
      # 4. Unpack the package
      # 5. cd into the package directory (sometimes a package can be called grpcio-tools or grpcio_tools, so we use * to match)
      # 6. Install cibuildwheel, to the pinned version, as we don't want backwards incompatible changes to break our builds.
      # 7. Run cibuildwheel, outputting the wheels to the wheelsout directory, which is processed in the next step.
      - name: Build wheels for ${{ inputs.package_name }} ${{ inputs.package_version }}
        run: |
          rm -rf build_${{ steps.build_name.outputs.BUILD_NAME }}
          mkdir build_${{ steps.build_name.outputs.BUILD_NAME }}
          cd build_${{ steps.build_name.outputs.BUILD_NAME }}
          /usr/local/bin/wget --quiet ${{ inputs.package_url }}
          tar xf *.tar.gz
          cd *
          python -m pip install cibuildwheel==2.11.3
          python -m cibuildwheel --output-dir ../wheelsout
        env:
          # We just want to build arm64 for now
          CIBW_ARCHS_MACOS: "arm64"
          # cibuildwheel can't run arm64 tests (yet), so we skip it.
          # see https://cibuildwheel.readthedocs.io/en/stable/options/#test-skip
          CIBW_TEST_SKIP: "*_arm64"
          # Sets the python version to the one we want to build for, and with arm64.
          # See https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip
          CIBW_BUILD: "cp${{ steps.python_no_dots.outputs.PYTHON_NO_DOTS }}-macosx_arm64"
          # pip is default, but incase this changes we'll still set it to not break in future.
          CIBW_BUILD_FRONTEND: pip
          # -vvv, to show the most amount of logs for debugging / auditing.
          # see https://cibuildwheel.readthedocs.io/en/stable/options/#build-verbosity
          CIBW_BUILD_VERBOSITY: 3
          # We allow passing in environment variables, as some packages like grpcio need them.
          # We also add LDFLAGS/CFLAGS/CPPFLAGS for openssl.
          # As of 2022-12-18 we use the homebrew version, which is openssl 3.0.7
          CIBW_ENVIRONMENT_MACOS: ${{ inputs.environment_variables }} CFLAGS="-I/usr/local/opt/openssl@3/include" LDFLAGS="-L/usr/local/opt/openssl@3/lib" CPPFLAGS="-I/usr/local/opt/openssl@3/include" MAKEFLAGS="-j$(sysctl -n hw.logicalcpu)" PATH=${{ steps.ccache_env.outputs.CCACHE_PATH_PREPEND }}:$PATH
          # Ensure we have Cython & run pip install for anything else that needs to run.
          CIBW_BEFORE_BUILD: "pip install Cython; if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi"
          MAKEFLAGS: "-j$(sysctl -n hw.logicalcpu)"

      # This uploads in a zip format, so we add zip to the end to ensure this is obvious.
      # @todo Do we also want to upload this to S3 (Wasabi/B2)? Or just handle this in the build script?
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.package_name }}-${{ inputs.package_version }}-cp${{ steps.python_no_dots.outputs.PYTHON_NO_DOTS }}-cp${{ steps.python_no_dots.outputs.PYTHON_NO_DOTS }}-macosx_11_0_arm64.whl.zip
          path: build_${{ steps.build_name.outputs.BUILD_NAME }}/wheelsout/*.whl

      # Since we use a self-hosted builder, we want to clean up after the build.
      # We do use snapshots (so when it's shutdown we revert to the default state), but this is still good practice.
      - name: Cleanup
        if: always()
        run: rm -rf build_${{ steps.build_name.outputs.BUILD_NAME }} wheelsout